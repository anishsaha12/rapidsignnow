from __future__ import absolute_import, unicode_literals
"""
Django settings for rapidsignnow project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&datio2wtx2$@hh_!h@5rtvi7h_xkud7&@5xcg^otuw$)w-&bs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
if os.environ.get("ENV") == "prod":
    DEBUG = False
if os.environ.get("ENV") == "staging":
    DEBUG = False
# DEBUG = False
ALLOWED_HOSTS = ["app.rapidsignnow.com","staging.rapidsignnow.com","ec2-52-52-77-99.us-west-1.compute.amazonaws.com"]


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_twilio',
    'storages',
    'django_celery_results',
    'freshly',
    'django_crontab',

    'address',
    'client',
    'invoice',
    'law_firm',
    'case',
    'status_update',
    'investigator',
    'broker',
    'master_broker',
    'invoice_line',
    'document',
    'attached_document',
    'customer_profile',
    'transactions',
    'failed_transactions',
    'refunds',

    'system_admin',

    'constance.backends.database',
    'constance'

)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'freshly.middleware.assets.AssetVersioningMiddleware',
)

ROOT_URLCONF = 'rapidsignnow.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'constance.context_processors.config',
                'django.contrib.messages.context_processors.messages',
                'rapidsignnow.context_processors.global_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'rapidsignnow.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {}

if os.environ.get("DATABASE_BACKEND_NAME") == "django.db.backends.sqlite3":
    DATABASES = {
        'default': {
            'ENGINE':  os.environ.get("DATABASE_BACKEND_NAME"),
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
elif os.environ.get("DATABASE_BACKEND_NAME") == "django.db.backends.mysql":
    DATABASES = {
        'default': {
            'ENGINE': os.environ.get("DATABASE_BACKEND_NAME"),
            'NAME': os.environ.get("MYSQL_DB_NAME"),
            'USER': os.environ.get("MYSQL_USER"),
            'PASSWORD':os.environ.get("MYSQL_PASSWORD"),
            'HOST':os.environ.get("MYSQL_HOST"),
            'OPTIONS': {"init_command": "SET foreign_key_checks = 0;"}
        }
    }


CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

CONSTANCE_CONFIG = {
    'DEFAULT_IN_AREA_PAYMENT_FOR_ONE_SIGNATURE_LAW_FIRM': (
        0.0, 'Default in-area payment for one signature for law firm', float),
    'DEFAULT_IN_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_LAW_FIRM': (
        0.0, 'Default in-area payment for each additional signature for law firm', float),
    'DEFAULT_IN_AREA_PAYMENT_FOR_CHILDREN_LAW_FIRM': (0.0, 'Default in-area payment for children for law firm', float),
    'MAXIMUM_IN_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_LAW_FIRM': (
        0.0, 'Maximum in-area payment for any number of signatures for law firm', float),
    'DEFAULT_IN_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_LAW_FIRM': (
        0.0, 'Default out-of-area payment when signature not obtained for investigator', float),

    'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_ONE_SIGNATURE_LAW_FIRM': (
        0.0, 'Default out-of-area payment for one signature for law firm', float),
    'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_LAW_FIRM': (
        0.0, 'Default out-of-area payment for each additional signature for law firm', float),
    'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_CHILDREN_LAW_FIRM': (
        0.0, 'Default out-of-area payment for children for law firm', float),
    'MAXIMUM_OUT_OF_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_LAW_FIRM': (
        0.0, 'Maximum out-of-area payment for any number of signatures for law firm', float),
    'DEFAULT_OUT_OF_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_LAW_FIRM': (
        0.0, 'Default out-of-area payment when signature not obtained for investigator', float),

    'MILEAGE_COMPENSATION_RATE_LAW_FIRM': (0.0, 'Mileage Compensation rate for law firm', float),
    'MILEAGE_THRESHOLD_LAW_FIRM': (0.0, 'Mileage Threshold for law firm', float),

    'DEFAULT_IN_AREA_PAYMENT_FOR_ONE_SIGNATURE_INVESTIGATOR': (
        0.0, 'Default in-area payment for one signature for investigator', float),
    'DEFAULT_IN_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_INVESTIGATOR': (
        0.0, 'Default in-area payment for each additional signature for investigator', float),
    'DEFAULT_IN_AREA_PAYMENT_FOR_CHILDREN_INVESTIGATOR': (
        0.0, 'Default in-area payment for children for investigator', float),
    'MAXIMUM_IN_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_INVESTIGATOR': (
        0.0, 'Maximum in-area payment for any number of signatures for investigator', float),
    'DEFAULT_IN_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_INVESTIGATOR': (
        0.0, 'Default out-of-area payment when signature not obtained for investigator', float),

    'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_ONE_SIGNATURE_INVESTIGATOR': (
        0.0, 'Default out-of-area payment for one signature for investigator', float),
    'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_INVESTIGATOR': (
        0.0, 'Default out-of-area payment for each additional signature for investigator', float),
    'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_CHILDREN_INVESTIGATOR': (
        0.0, 'Default out-of-area payment for children for investigator', float),
    'MAXIMUM_OUT_OF_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_INVESTIGATOR': (
        0.0, 'Maximum out-of-area payment for any number of signatures for investigator', float),
    'DEFAULT_OUT_OF_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_INVESTIGATOR': (
        0.0, 'Default out-of-area payment when signature not obtained for investigator', float),

    'MILEAGE_COMPENSATION_RATE_INVESTIGATOR': (0.0, 'Mileage Compensation rate for investigator', float),
    'MILEAGE_THRESHOLD_INVESTIGATOR': (0.0, 'Mileage Threshold for investigator', float),
}

CONSTANCE_CONFIG_FIELDSETS = {
    'Law firm In Area options': ('DEFAULT_IN_AREA_PAYMENT_FOR_ONE_SIGNATURE_LAW_FIRM',
                                 'DEFAULT_IN_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_LAW_FIRM',
                                 'DEFAULT_IN_AREA_PAYMENT_FOR_CHILDREN_LAW_FIRM',
                                 'MAXIMUM_IN_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_LAW_FIRM',
                                 'DEFAULT_IN_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_LAW_FIRM'),
    'Law firm Out of Area options': ('DEFAULT_OUT_OF_AREA_PAYMENT_FOR_ONE_SIGNATURE_LAW_FIRM',
                                 'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_LAW_FIRM',
                                 'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_CHILDREN_LAW_FIRM',
                                 'MAXIMUM_OUT_OF_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_LAW_FIRM',
                                 'DEFAULT_OUT_OF_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_LAW_FIRM'),
    'Law firm miscellaneous options': ('MILEAGE_COMPENSATION_RATE_LAW_FIRM', 'MILEAGE_THRESHOLD_LAW_FIRM'),

    'Investigator In Area options': ('DEFAULT_IN_AREA_PAYMENT_FOR_ONE_SIGNATURE_INVESTIGATOR',
                                 'DEFAULT_IN_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_INVESTIGATOR',
                                 'DEFAULT_IN_AREA_PAYMENT_FOR_CHILDREN_INVESTIGATOR',
                                 'MAXIMUM_IN_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_INVESTIGATOR',
                                 'DEFAULT_IN_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_INVESTIGATOR'),
    'Investigator Out of Area options': ('DEFAULT_OUT_OF_AREA_PAYMENT_FOR_ONE_SIGNATURE_INVESTIGATOR',
                                 'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_EACH_ADDITIONAL_ADULT_SIGNATURE_INVESTIGATOR',
                                 'DEFAULT_OUT_OF_AREA_PAYMENT_FOR_CHILDREN_INVESTIGATOR',
                                 'MAXIMUM_OUT_OF_AREA_PAYMENT_FOR_ANY_NUMBER_OF_SIGNATURES_INVESTIGATOR',
                                 'DEFAULT_OUT_OF_AREA_PAYMENT_WHEN_SIGNATURE_NOT_OBTAINED_INVESTIGATOR'),
    'Investigator miscellaneous options': ('MILEAGE_COMPENSATION_RATE_INVESTIGATOR', 'MILEAGE_THRESHOLD_INVESTIGATOR'),
}



EMAIL_BACKEND =  os.environ.get("EMAIL_BACKEND")
SENDGRID_API_KEY = os.environ.get("SENDGRID_API_KEY")
INVOICE_HARDCODED_TO_EMAIL=os.environ.get("INVOICE_HARDCODED_TO_EMAIL")

TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")
TWILIO_OUTGOING_PHONE_NUMBER = os.environ.get("TWILIO_OUTGOING_PHONE_NUMBER")
TWILIO_NOTIFICATIONS_PHONE_NUMBER = os.environ.get("TWILIO_NOTIFICATIONS_PHONE_NUMBER")

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/



#For AWS S3

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = 'media'

STATICFILES_DIRS = (
        os.path.join(BASE_DIR,'static'),
)
# STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'all_staticfiles')



MEDIA_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


CELERY_BROKER_URL = 'amqp://guest@localhost'
CELERY_RESULT_BACKEND = 'amqp://guest@localhost'
# CELERY_RESULT_BACKEND = 'db+mysql://{}:{}@localhost/{}'.format(DATABASES["default"]["USER"],DATABASES["default"]["PASSWORD"],DATABASES["default"]["NAME"]) 
# CELERY_RESULT_BACKEND = 'db+mysql://root:password@localhost/rsn2'
# Celery Data Format
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Los_Angeles'
CELERY_IMPORTS = (
    'broker.tasks',
)


FRESHLY_ASSETS_EXTENTIONS = [
     'jpg', 'jpeg', 'gif', 'css', 'png', 'js', 'ico', 'txt', 'json'
 ]

 # Add `FRESHLY_ASSETS_VERSION` to your setting file.

FRESHLY_ASSETS_VERSION = '005'

AUTHORIZE_LOGIN_ID = os.environ.get("AUTHORIZE_LOGIN_ID")
AUTHORIZE_TRANSACTION_KEY = os.environ.get("AUTHORIZE_TRANSACTION_KEY")




CRONJOBS = [
    ('0 7 * * *', 'rapidsignnow.cron.charge_law_firm_daily'),
    ('0 7 5 * *', 'rapidsignnow.cron.charge_law_firm_monthly'),
    ('0 11 * * *', 'rapidsignnow.cron.check_failed_transactions'),
    ('0 22 * * *', 'rapidsignnow.cron.send_reminder_for_approval'),
]
CRONTAB_COMMAND_SUFFIX = '2>&1'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "%(asctime)s %(levelname)s %(message)s",
            'datefmt': "%a, %d %b %Y %H:%M:%S"
        },
    },
    'handlers': {
        'django_crontab': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'django_crontab.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django_crontab.crontab': {
            'handlers': ['django_crontab'],
            'level': 'DEBUG',
            'propagate': True,
        },
 
    }
}
